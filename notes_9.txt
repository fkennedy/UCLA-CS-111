Scheduling: Proportional Share

Also known as the fair-share scheduler. Instead of optimizing turnaround/response time, it'll try to guarantee that each job obtain a certain percentage of CPU time

9.1 Basic Concept: Tickets Represent Your Share
    Tickets are used to represent the share of a resource that a process shoudl receive
    Example:
        A has 75 tickets, B has 25 tickets
            A holds tickets 0-74, B holds tickets 75-99
        Scheduler picks out random ticket
        Output of lottery:
            63 85 70 39 76 17 29 41 36 39 10 99 68 83 63 62 43 0 49 49
        A AA AAAAAA A AAAAAA
         B  B      B B
        B only gets to run 4 out of 20 time slices (20%) instead of the 25 allocation
        Longer these two jobs complete, more likely to achieve desired percentages

9.2 Ticket Mechanisms
    Ticket currency
    Each user is given a number of tickets
    Each user assign its jobs a number of tickets
    The number of tickets for each job is converted into a global currency
    The loterry will then be held over the global ticket currency
    Example:
        User A and B are given 100 tickets each
        User A has two jobs, A1 and A2 and assigned 500 tickets each to them (total of 1000)
        User B has one job, B1, and assigned 10 tickets to it (total of 10)
        Therefore, global currency of each job is:
            A1: 50 tickets
            A2: 50 tickets
            B1: 100 tickets

    Ticket transfer - a process can temporarily give its tickets to another process
    Example:
        Client process sends message to server to work on client's behalf
        Client pass tickets to server to maximize performance while handling client's request
        Tickets are transferred back to client.

    Ticket inflation - a process can temporarily raise/lower the number of tickets it owns
    If any one process knows it needs more CPU time, it'll temporarily raise its ticket value to reflect a need to the system

9.3 Implementation
    Need:
        Random number generator
        Data structure to track processes
        Total number of tickets

    Lottery Scheduling Decision Code
        See 9.3.1.c
        The code goes through the list of processes, adding each ticket value to counter until the value exceed winner (where winner is a randomly generated number)
        Once exceeded, the process it is currently on will be scheduled
        Example:
            Head->A->B->C->NULL
            A: 100 tickets
            B: 50 tickets
            C: 250 tickets
            Counter incremented to 100
            100 < 300, moves on to B
            Counter incremented to 150
            150 < 300, moves on to C
            Counter incremented to 400
            400 > 300, schedules C

9.4 An Example
    We want to achieve a scheduler that completes its jobs at roughly the same time
    Unfairness metric is the time the first job completes divided by the time the second job completes
    Perfectly fair scheduler would achieve U = 1

9.6 Why Not Deterministic?
    Randomness, though simple and approximately correct, will not have right proportions
    Stride scheduling
        Compute stride by dividing some large number by the number of tickets each process has been assigned
        Example:
            A: 100 tickets
            B: 50 tickets
            C: 250 tickets
            Divide 10000 by each of the values
            Stride of each process:
                A: 100
                B: 200
                C: 40
            Increment pass value of each process by its stride
            
Trace of behavior of example:
Pass(A) | Pass(B) | Pass(C) | Who Runs?
    0   |    0    |    0    |    A
   100  |    0    |    0    |    B
   100  |   200   |    0    |    C
   100  |   200   |   40    |    C
   100  |   200   |   80    |    C
   100  |   200   |   120   |    A
   200  |   200   |   120   |    C
   200  |   200   |   160   |    C
   200  |   200   |   200   |    ...
    A runs twice
    B runs once
    C runs five times
    Which is exactly in proportion to their ticket values: 250, 100, 50.

    While lottery scheduling achieves the proportions probabilistically over time, stride scheduling gets them exactly right at the end of each scheduling cycle.